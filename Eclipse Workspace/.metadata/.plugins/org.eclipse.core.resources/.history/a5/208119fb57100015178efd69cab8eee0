
public class PID {
	
	static double kp, ki, kd;
	static State state = new State(0, 0);
	static double goal;
	static double intVal;
	
	/**
	 * Constructor for the PID system
	 * @param goal The setvalue, or the desired result value of the system
	 * @param Kp The gain value for the proportional term
	 * @param Ki The gain value for the integral term
	 * @param Kd The gain value for the derivative term
	 */
	public PID (double goal, double Kp, double Ki, double Kd){
		this.kp = Kp;
		this.ki = Ki;
		this.kd = Kd;
		this.goal = goal;
		this.intVal = 0.0d;
	}
	
	public double process(State currState){
		
System.out.println("currState: " + currState.getVal() + "\tTime: " + currState.getTime());
System.out.println("State: " + state.getVal() + "\tTime: " + state.getTime());

		State state_old = new State(state.getVal(), state.getTime());
		state.set(currState);
		
System.out.println("currState: " + currState.getVal() + "\tTime: " + currState.getTime());
System.out.println("State: " + state.getVal() + "\tTime: " + state.getTime());
System.out.println("state_old: " + state_old.getVal() + "\tTime: " + state_old.getTime());

		double out = 0.0d;
		
		//Proportional reaction to the difference in state
		out += kp*(goal-state.getVal());
		
		
		//Derivative reaction to the difference in state
		if(state.getTime() != state_old.getTime()){
			out -= kd* ( (state.getVal() - state_old.getVal()) / (state.getTime() - state_old.getTime()) );
		}
		
		/*//Integral reaction to the difference in state
		intVal += (state_old.getVal() * (state.getTime() - state_old.getTime())) + //area of the rectangle formed
				( state.getVal() - state_old.getVal() *  (state.getTime() - state_old.getTime() / 2)); 
				//Area of the triangle formed by the change, and negative if the value goes down, so will subtract from the area
		out+= ki * intVal; //intVal constantly increases by summing all the integral errors over time.
		*/
		return out;
	}
	
}
